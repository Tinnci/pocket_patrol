---
description: 
globs: *.dart
alwaysApply: false
---
# 项目结构与开发规则（2024Q2 最新）

- 主入口：[lib/main.dart](mdc:lib/main.dart)，全局注入 Provider，加载 PocketPatrolApp。
- 采用 MVVM 架构，分层清晰：
  - 页面（UI）：[lib/screens/](mdc:lib/screens)，如 [live_view_screen.dart](mdc:lib/screens/live_view_screen.dart)、[recordings_screen.dart](mdc:lib/screens/recordings_screen.dart)、[settings_screen.dart](mdc:lib/screens/settings_screen.dart)
  - 视图模型（ViewModel）：[lib/viewmodels/](mdc:lib/viewmodels)，如 [live_view_viewmodel.dart](mdc:lib/viewmodels/live_view_viewmodel.dart)、[recordings_viewmodel.dart](mdc:lib/viewmodels/recordings_viewmodel.dart)、[settings_viewmodel.dart](mdc:lib/viewmodels/settings_viewmodel.dart)
  - 服务（Service）：[lib/services/](mdc:lib/services)，如 [camera_service.dart](mdc:lib/services/camera_service.dart)、[recording_service.dart](mdc:lib/services/recording_service.dart)、[settings_service.dart](mdc:lib/services/settings_service.dart)
  - 仓库（Repository）：[lib/repositories/](mdc:lib/repositories)，预留数据持久化与远程/本地切换扩展
- 全局状态管理：使用 Provider（[main.dart](mdc:lib/main.dart)），所有 ViewModel 通过 MultiProvider 注入，UI 响应式。
- 设计风格参考 Figma/HTML 设计稿，优先保证界面一致性和可用性。

---

## 已实现功能

1. **摄像头实时预览**
   - CameraService 封装底层操作，LiveViewViewModel 管理状态，LiveViewScreen 只负责 UI。
2. **录像管理**
   - RecordingService 支持获取、删除录像（假数据），RecordingsViewModel 管理列表，RecordingsScreen 负责展示与交互。
3. **设置与主题切换**
   - SettingsService 支持主题模式持久化，SettingsViewModel 管理切换与读取，SettingsScreen 响应式切换主题。
4. **全局 Provider 注入**
   - main.dart 启动时自动加载设置和数据，所有页面响应式。

---

## 后续扩展建议

- 录像本地存储/回放：完善 RecordingService，接入本地文件系统，支持视频播放。
- 更多设置项：如分辨率、Token、Tailscale IP 等，均可在 SettingsService/ViewModel 扩展。
- 安全认证：实现 Token 生成与校验，保护流媒体服务安全。
- 流媒体服务：Service 层集成 MJPEG/WebRTC 推流。
- 高级特性：如运动检测、云存储等，均可按当前分层模式平滑扩展。

---

> 本规则持续迭代，优先保证摄像头流采集、推流、Tailscale 虚拟内网访问、认证、设置、录像等核心目标。

